package cpuscheduling;

import java.util.Scanner;

public class cpu {
	
	public static void main(String[] args) {
	int[] serviceTime = new int[5];
	//Stores the values of the processes and how much processing they have left to do
	int[] arrivalTime = new int[5];
	//Stores the values of when the processes should be available to the program
	int[] startTime = new int [] {1,1,1,1,1};
	//Stores the start time to be overwritten once the processor starts. Has default values so the
	//program knows that the process hasn't been run before
	int[] endTime = new int[5];
	//Stores when the processor is done
	int[] initialWaitTime = new int[5];
	//Stores how long it takes from when the process is received to when it starts initially
	int[] totalWaitTime = new int[5];
	//Total time the process spends not being processed before it is done
	int[] turnAroundTime = new int [5];
	//Total time the process spends waiting to process after it has arrived
	int[] lastActivated = new int [5];
	//This allows for calculation of total wait time comparing the difference of the counter to the last value stored
	int i = 0;
	//I is used to jump between arrays in the for statement
	int counter = 0;
	//Total number of processing iterations
	int avgTurnAroundTime = 0;
	//Averages the turn around time for each process
	int avgTotalWaitTime = 0;
	//Averages the total wait time for each process
	int quantum = quantum();
	int contextswitch = contextSwitch();
	
	callLoop(serviceTime, arrivalTime, quantum, contextswitch);	
	System.out.println(serviceTime[0]);
	System.out.println(arrivalTime[0]);
	for (int endCount=0;endCount<5 ;i++) {
		//Statement will continue to loop until all processes are dealt with
		if (serviceTime[i] != -100 && counter >= arrivalTime[i] ){
			//If the value is not equal to the value I use as a throw away and it is currently or passed the arrival time
			totalWaitTime[i] += counter - lastActivated[i] ; 
			//This allows for calculation of total wait time comparing the difference of the counter to the last value stored
			System.out.println(counter);
			//If the process is being processed for the first time
			if (startTime[i] == 1) {
				startTime[i] = counter;
				initialWaitTime[i] =  counter - arrivalTime[i]  ;
			}
			//Most likely scenario where the value is still bigger than the quantum
			if (serviceTime[i]>quantum) {
				serviceTime[i] += -quantum;
				counter+=quantum;
				//Take the counter and add the quantum as to increase it.
			}
			else {
				counter += serviceTime[i];
				serviceTime[i] = 0;
				System.out.println("less then ten");
				//Else take the remaining value and add it to the counter and zero it out
			}
			System.out.println(counter);
			
			if (serviceTime[i] == 0) {
				serviceTime[i] = -100;
				endCount ++;
				endTime[i] = counter;
				turnAroundTime[i] =  endTime[i]-startTime[i];
				//If it gets zeroed out complete the rest of the statistics 
				}
			lastActivated[i] = counter;
			//Just keeps track of the last time that the process was accessed
			counter +=contextswitch;
			//Increase the counter by whatever the context switch is set to
			}
		if(i==4) {
			i=-1;
			//Reset the i value when it gets above the index of the arrays
		}
	}
	//After the computing is done this prints out all the values that are necessary for this project
	for (int c = 0; c <5; c++) {
		System.out.println("Process ID #"+(c+1)+ " Start Time "+startTime[c]+" End Time "+endTime[c]+" Initial Wait Time "+initialWaitTime[c]+" Total Wait Time "+ totalWaitTime[c]+" turnaroundTime "+turnAroundTime[c]);
		avgTurnAroundTime += turnAroundTime[c];
		avgTotalWaitTime += totalWaitTime[c];
		//After printing out the process values then it computes average turn around time and total wait time
	}
	//Calculate average total times
	avgTurnAroundTime = avgTurnAroundTime/5;
	avgTotalWaitTime = avgTotalWaitTime/5;
	System.out.println("Average Turn Around Time "+avgTurnAroundTime);
	System.out.println("Average Total Wait Time "+avgTotalWaitTime);
	}
	public static void callLoop(int[] serviceTime,int[] arrivalTime, int quantum, int contextSwitch) {
		int i = 0;
		//To sum this up in order
		//Tell the system to scan
		//Print out a message
		//Receive next response from I/O
		//Take integer and set it to array
		//Rinse repeat for both service time and arrival time
		while(i!=5) {
		Scanner one = new Scanner(System.in);
		System.out.println("Please enter the amount of service time required");
		int numA = one.nextInt();
		serviceTime[i] = numA;
		Scanner two = new Scanner(System.in);
		System.out.println("Please enter the arrival time of this process id");
		int numB = two.nextInt();
		arrivalTime[i] = numB;
		i++;
		
		}
		
		}
	public static int quantum() {
		
		Scanner qua = new Scanner(System.in);
		System.out.println("Please enter the amount of service time before switching to the next process");
		int quantum = qua.nextInt();
		return quantum;
		//To sum this up in order
		//Tell the system to scan
		//Print out a message
		//Receive next response from I/O
		//Take integer and set variable
		
	}
	public static int contextSwitch() {
		Scanner con = new Scanner(System.in);
		System.out.println("Please enter the amount for a context switch");
		int contextSwitch = con.nextInt();
		return contextSwitch;
		//To sum this up in order
		//Tell the system to scan
		//Print out a message
		//Receive next response from I/O
		//Take integer and set variable
		}
	}
		//Written By James Conlin 2/28/22
		//Updated last 3/3/22
	
		